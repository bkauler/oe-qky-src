From c28ef44e1ba82e1a3419c740ac0bbb8aaa591bcd Mon Sep 17 00:00:00 2001
From: Robert Ancell <robert.ancell@canonical.com>
Date: Wed, 18 Aug 2010 16:26:15 +1000
Subject: [PATCH] Use gettext for translations in .policy files
Bug: http://bugs.freedesktop.org/show_bug.cgi?id=29639
Bug-Ubuntu: https://launchpad.net/bugs/619632

---
 src/polkitbackend/polkitbackendactionpool.c |   48 +++++++++++++++++++++++++++
 1 files changed, 48 insertions(+), 0 deletions(-)

Index: policykit/src/polkitbackend/polkitbackendactionpool.c
===================================================================
--- policykit.orig/src/polkitbackend/polkitbackendactionpool.c	2011-04-20 12:02:27.366174916 +0200
+++ policykit/src/polkitbackend/polkitbackendactionpool.c	2011-08-08 14:14:31.713738052 +0200
@@ -24,6 +24,8 @@
 #include <pwd.h>
 #include <string.h>
 #include <expat.h>
+#include <locale.h>
+#include <glib/gi18n.h>
 
 #include <polkit/polkit.h>
 #include <polkit/polkitprivate.h>
@@ -45,7 +47,9 @@
   gchar *vendor_url;
   gchar *icon_name;
   gchar *description;
+  gchar *description_domain;
   gchar *message;
+  gchar *message_domain;  
 
   PolkitImplicitAuthorization implicit_authorization_any;
   PolkitImplicitAuthorization implicit_authorization_inactive;
@@ -67,7 +71,9 @@
   g_free (action->vendor_url);
   g_free (action->icon_name);
   g_free (action->description);
+  g_free (action->description_domain);
   g_free (action->message);
+  g_free (action->message_domain);
 
   g_hash_table_unref (action->localized_description);
   g_hash_table_unref (action->localized_message);
@@ -87,6 +93,7 @@
 
 static const gchar *_localize (GHashTable *translations,
                                const gchar *untranslated,
+                               const gchar *domain,
                                const gchar *lang);
 
 typedef struct
@@ -387,9 +394,11 @@
 
   description = _localize (parsed_action->localized_description,
                            parsed_action->description,
+                           parsed_action->description_domain,
                            locale);
   message = _localize (parsed_action->localized_message,
                        parsed_action->message,
+                       parsed_action->message_domain,
                        locale);
 
   ret = polkit_action_description_new (action_id,
@@ -605,11 +614,16 @@
   GHashTable *policy_messages;
 
   char *policy_description_nolang;
+  char *policy_description_domain;
   char *policy_message_nolang;
+  char *policy_message_domain;
 
   /* the value of xml:lang for the thing we're reading in _cdata() */
   char *elem_lang;
 
+  /* the value of gettext-domain for the thing we're reading in _cdata() */
+  char *elem_domain;
+
   char *annotate_key;
   GHashTable *annotations;
 
@@ -631,8 +645,12 @@
 
   g_free (pd->policy_description_nolang);
   pd->policy_description_nolang = NULL;
+  g_free (pd->policy_description_domain);
+  pd->policy_description_domain = NULL;
   g_free (pd->policy_message_nolang);
   pd->policy_message_nolang = NULL;
+  g_free (pd->policy_message_domain);
+  pd->policy_message_domain = NULL;
   if (pd->policy_descriptions != NULL)
     {
       g_hash_table_unref (pd->policy_descriptions);
@@ -652,6 +670,8 @@
     }
   g_free (pd->elem_lang);
   pd->elem_lang = NULL;
+  g_free (pd->elem_domain);
+  pd->elem_domain = NULL;
 }
 
 static void
@@ -739,6 +759,10 @@
             {
               pd->elem_lang = g_strdup (attr[1]);
             }
+          if (num_attr == 2 && strcmp (attr[0], "gettext-domain") == 0)
+            {
+              pd->elem_domain = g_strdup (attr[1]);
+            }
           state = STATE_IN_ACTION_DESCRIPTION;
         }
       else if (strcmp (el, "message") == 0)
@@ -747,6 +771,10 @@
             {
               pd->elem_lang = g_strdup (attr[1]);
             }
+          if (num_attr == 2 && strcmp (attr[0], "gettext-domain") == 0)
+            {
+              pd->elem_domain = g_strdup (attr[1]);
+            }
           state = STATE_IN_ACTION_MESSAGE;
         }
       else if (strcmp (el, "vendor") == 0 && num_attr == 0)
@@ -849,6 +877,7 @@
         {
           g_free (pd->policy_description_nolang);
           pd->policy_description_nolang = str;
+          pd->policy_description_domain = g_strdup (pd->elem_domain);
           str = NULL;
         }
       else
@@ -865,6 +894,7 @@
         {
           g_free (pd->policy_message_nolang);
           pd->policy_message_nolang = str;
+          pd->policy_message_domain = g_strdup (pd->elem_domain);
           str = NULL;
         }
       else
@@ -962,6 +992,8 @@
 
   g_free (pd->elem_lang);
   pd->elem_lang = NULL;
+  g_free (pd->elem_domain);
+  pd->elem_domain = NULL;
 
   switch (pd->state)
     {
@@ -993,7 +1025,9 @@
         action->vendor_url = g_strdup (vendor_url);
         action->icon_name = g_strdup (icon_name);
         action->description = g_strdup (pd->policy_description_nolang);
+        action->description_domain = g_strdup (pd->policy_description_domain);
         action->message = g_strdup (pd->policy_message_nolang);
+        action->message_domain = g_strdup (pd->policy_message_domain);
 
         action->localized_description = pd->policy_descriptions;
         action->localized_message     = pd->policy_messages;
@@ -1095,6 +1129,7 @@
  * _localize:
  * @translations: a mapping from xml:lang to the value, e.g. 'da' -> 'Smadre', 'en_CA' -> 'Punch, Aye!'
  * @untranslated: the untranslated value, e.g. 'Punch'
+ * @domain: the gettext domain for this string. Make be NULL.
  * @lang: the locale we're interested in, e.g. 'da_DK', 'da', 'en_CA', 'en_US'; basically just $LANG
  * with the encoding cut off. Maybe be NULL.
  *
@@ -1105,11 +1140,25 @@
 static const gchar *
 _localize (GHashTable *translations,
            const gchar *untranslated,
+           const gchar *domain,
            const gchar *lang)
 {
   const gchar *result;
   gchar lang2[256];
   guint n;
+  
+  if (domain != NULL)
+    {
+      gchar *old_locale;
+
+      old_locale = g_strdup (setlocale (LC_ALL, NULL));
+      setlocale (LC_ALL, lang);
+      result = dgettext (domain, untranslated);
+      setlocale (LC_ALL, old_locale);
+      g_free (old_locale);
+
+      goto out;
+    }
 
   if (lang == NULL)
     {

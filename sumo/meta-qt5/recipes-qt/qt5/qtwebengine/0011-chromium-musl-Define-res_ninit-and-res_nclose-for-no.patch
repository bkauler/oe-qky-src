From 1781911655bddf8a8352f9bd0a7ce4867df6981b Mon Sep 17 00:00:00 2001
From: Khem Raj <raj.khem@gmail.com>
Date: Fri, 7 Jul 2017 15:27:50 -0700
Subject: [PATCH] chromium: musl: Define res_ninit and res_nclose for non-glibc
 platforms

Signed-off-by: Khem Raj <raj.khem@gmail.com>
---
 chromium/net/dns/dns_config_service_posix.cc |  4 ++++
 chromium/net/dns/dns_reloader.cc             |  4 ++++
 chromium/net/dns/resolv_compat.h             | 29 ++++++++++++++++++++++++++++
 3 files changed, 37 insertions(+)
 create mode 100644 chromium/net/dns/resolv_compat.h

diff --git a/chromium/net/dns/dns_config_service_posix.cc b/chromium/net/dns/dns_config_service_posix.cc
index 088fb9b..98d0a35 100644
--- a/chromium/net/dns/dns_config_service_posix.cc
+++ b/chromium/net/dns/dns_config_service_posix.cc
@@ -26,6 +26,10 @@
 #include "net/dns/notify_watcher_mac.h"
 #include "net/dns/serial_worker.h"
 
+#if defined(OS_LINUX) && !defined(__GLIBC__)
+#include "net/dns/resolv_compat.h"
+#endif
+
 #if defined(OS_MACOSX) && !defined(OS_IOS)
 #include "net/dns/dns_config_watcher_mac.h"
 #endif
diff --git a/chromium/net/dns/dns_reloader.cc b/chromium/net/dns/dns_reloader.cc
index 322c8a5..72ff40d 100644
--- a/chromium/net/dns/dns_reloader.cc
+++ b/chromium/net/dns/dns_reloader.cc
@@ -9,6 +9,10 @@
 
 #include <resolv.h>
 
+#if defined(OS_LINUX) && !defined(__GLIBC__)
+#include "net/dns/resolv_compat.h"
+#endif
+
 #include "base/lazy_instance.h"
 #include "base/logging.h"
 #include "base/macros.h"
diff --git a/chromium/net/dns/resolv_compat.h b/chromium/net/dns/resolv_compat.h
new file mode 100644
index 0000000..4f0e852
--- /dev/null
+++ b/chromium/net/dns/resolv_compat.h
@@ -0,0 +1,29 @@
+#if !defined(__GLIBC__)
+/***************************************************************************
+ * resolv_compat.h
+ *
+ * Mimick GLIBC's res_ninit() and res_nclose() for musl libc
+ * Note: res_init() is actually deprecated according to
+ * http://docs.oracle.com/cd/E36784_01/html/E36875/res-nclose-3resolv.html
+ **************************************************************************/
+#include <string.h>
+
+static inline int res_ninit(res_state statp)
+{
+	int rc = res_init();
+	if (statp != &_res) {
+		memcpy(statp, &_res, sizeof(*statp));
+	}
+	return rc;
+}
+
+static inline int res_nclose(res_state statp)
+{
+	if (!statp)
+		return -1;
+	if (statp != &_res) {
+		memset(statp, 0, sizeof(*statp));
+	}
+	return 0;
+}
+#endif
